type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |-
    package animals;

    import animals.GameComponents.Engine.GameMaster;

    import java.util.Optional;

    public class Main {

        public static void main(String[] args) {
            GameMaster gameMaster = new GameMaster(validateArgumentsReturnFormat(args).orElse("json"));
            gameMaster.play();
        }

        private static Optional<String> validateArgumentsReturnFormat(String[] args) {
            if (args.length == 0) {
                return Optional.empty();
            }
            assert args.length == 2;
            if (!"-type".equals(args[0])) {
                throw new IllegalArgumentException("Arguments: -type [json, xml, yaml]");
            }
            if (!"json".equals(args[1]) && !"xml".equals(args[1]) && !"yaml".equals(args[1])) {
                throw new IllegalArgumentException("Arguments: -type [json, xml, yaml]");
            }
            return Optional.of(args[1]);
        }

    }
  learner_created: false
- name: src/animals/Messages/Message.java
  visible: true
  text: |-
    package animals.Messages;

    public interface Message {
        public String getMessage();
    }
  learner_created: false
- name: src/animals/Messages/Greeting.java
  visible: true
  text: |
    package animals.Messages;

    import java.time.LocalTime;

    public class Greeting implements Message {
        private static final LocalTime MORNING = LocalTime.of(5, 0);
        private static final LocalTime AFTERNOON = LocalTime.of(12, 0);

        @Override
        public String getMessage() {
            LocalTime t = LocalTime.now();
            if (t.isBefore(MORNING)) {
                return "Hi, Early Bird\n";
            } else if (t.isBefore(AFTERNOON)) {
                return "Good morning\n";
            } else {
                return "Good evening\n";
            }
        }
    }
  learner_created: false
- name: src/animals/Messages/Goodbye.java
  visible: true
  text: |
    package animals.Messages;

    import java.util.Random;
    import java.util.List;

    public class Goodbye implements Message {
        private static final List<String> GOODBYES = List.of("Have a nice day!",
                "See you soon!",
                "Bye!",
                "Hasta la vista, baby!",
                "In a while, crocodile!",
                "See you later, aligator");

        private Random random = new Random();

        @Override
        public String getMessage() {
            return GOODBYES.get(random.nextInt(GOODBYES.size()));
        }
    }
  learner_created: false
- name: src/animals/Messages/NullMessage.java
  visible: true
  text: |
    package animals.Messages;

    public class NullMessage implements Message {
        @Override
        public String getMessage() {
            return "NULL MESSAGE";
        }
    }
  learner_created: false
- name: src/animals/GameComponents/Animal.java
  visible: true
  text: |
    package animals.GameComponents;

    import com.fasterxml.jackson.annotation.JsonInclude;

    import java.util.List;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    public class Animal {
        private static final String VOWELS = "aeiou";
        private static final List<String> ARTICLES = List.of("a ", "an ");

        private String article;
        private String name;
        private Fact fact;

        public Animal() {
        }

        public Animal(String input) {
            init(input);
        }

        public String getArticle() {
            return article;
        }

        public String getName() {
            return name;
        }

        public Fact getFact() {
            return fact;
        }

        public void setFact(Fact fact) {
            this.fact = fact;
        }

        @Override
        public java.lang.String toString() {
            return String.format("%s %s", article, name);
        }

        private void init(String userInput) {
            if (containsArticle(userInput)) {
                int firstWhiteSpace = userInput.indexOf(" ");
                article = userInput.substring(0, firstWhiteSpace);
                name = userInput.substring(firstWhiteSpace + 1, userInput.length());
            } else {
                name = userInput;
                if (VOWELS.contains(name.substring(0, 1))) {
                    article = "an";
                } else {
                    article = "a";
                }
            }
        }

        private boolean containsArticle(String text) {
            boolean containsArticle = false;
            for (String article : ARTICLES) {
                containsArticle |= text.startsWith(article);
            }
            return containsArticle;
        }
    }
  learner_created: false
- name: src/animals/Messages/AskAnimal.java
  visible: true
  text: |
    package animals.Messages;

    import animals.GameComponents.Animal;
    import animals.GameComponents.Engine.UserInteraction;

    public class AskAnimal implements Message {
        private Animal animal;

        public static Animal askFirstAnimal() {
            System.out.println("Which animal do you like most?");
            return new Animal(UserInteraction.getUserInput());
        }

        public static Animal askSecondAnimal() {
            System.out.println("Enter the second animal:");
            return new Animal(UserInteraction.getUserInput());
        }

        public AskAnimal(Animal animal) {
            this.animal = animal;
        }

        @java.lang.Override
        public String getMessage() {
            return String.format("Is it %s?", animal);
        }
    }
  learner_created: false
- name: src/animals/Messages/Clarification.java
  visible: true
  text: |
    package animals.Messages;

    import java.util.List;
    import java.util.Random;

    public class Clarification implements Message {
        private static final List<String> CLARIFICATION_QUESTIONS = List.of(
                "I'm not sure I caught you: was it",
                "Funny, I still don't understand, is it",
                "Oh, it's too complicated for me: just tell me",
                "Could you please simply say",
                "Oh, no, don't try to confuse me: say");

        Random random = new Random();

        @Override
        public String getMessage() {
            return String.format("%s %s?",
                    CLARIFICATION_QUESTIONS.get(random.nextInt(CLARIFICATION_QUESTIONS.size())),
                            "yes or no");
        }
    }
  learner_created: false
- name: src/animals/Messages/Confirmation.java
  visible: true
  text: |
    package animals.Messages;

    public class Confirmation implements Message {
        private String confirmation;

        public Confirmation(String confirmation) {
            this.confirmation = confirmation;
        }

        @java.lang.Override
        public String getMessage() {
            return String.format("You answered: %s", confirmation);
        }
    }
  learner_created: false
- name: src/animals/GameComponents/Engine/GameMaster.java
  visible: true
  text: |
    package animals.GameComponents.Engine;

    import animals.Actions.impl.Statement;
    import animals.GameInformation.GameInformation;
    import animals.GameInformation.InformationAccess;

    public class GameMaster {
        private Interogator interogator;

        public GameMaster(String format) {
            GameInformation gameInformation = InformationAccess.getGameInformation();
            gameInformation.setFileFormat(format);
            gameInformation.initTree();
            interogator = InformationAccess.getInterogator();
            init();
        }

        public void play() {
            boolean play = true;
            interogator.init();
            System.out.println("Let's play a game!");
            while (play) {
                System.out.println("You think of an animal, and I guess it.");
                System.out.println("Press enter when you're ready.");
                UserInteraction.getUserInput();
                interogator.traverseTree();
                System.out.println("Would you like to play again?");
                play = InformationAccess.getInterpreter().isAnswerYes();
            }
            interogator.performAction(Statement.GOODBYE);
            InformationAccess.getGameInformation().saveDate();
        }

        private void init() {
            interogator.performAction(Statement.GREET);
        }

    }
  learner_created: false
- name: src/animals/Messages/InterpretFacts.java
  visible: true
  text: |
    package animals.Messages;

    import animals.GameComponents.Animal;
    import animals.GameInformation.GameInformation;
    import animals.GameInformation.InformationAccess;

    public class InterpretFacts implements Message {
        private final GameInformation gameInformation;

        public InterpretFacts() {
            gameInformation = InformationAccess.getGameInformation();
        }

        @Override
        public String getMessage() {
            Animal firstAnimal = gameInformation.getFirstAnimal();
            Animal secondAnimal = gameInformation.getSecondAnimal();
            return String.format("I learned the following facts about animals:\n- The %s %s.\n- The %s %s.\n" +
                            "I can distinguish these animals by asking the question:\n%s\n",
                    firstAnimal.getName(),
                    firstAnimal.getFact().toString(),
                    secondAnimal.getName(),
                    secondAnimal.getFact().toString(),
                    !firstAnimal.getFact().isNegated() ? firstAnimal.getFact().turnIntoQuestion() : secondAnimal.getFact().turnIntoQuestion());

        }
    }
  learner_created: false
- name: src/animals/GameComponents/Engine/Interogator.java
  visible: true
  text: |
    package animals.GameComponents.Engine;

    import animals.Actions.Actions;
    import animals.Actions.impl.Question;
    import animals.Actions.impl.Statement;
    import animals.GameComponents.Animal;
    import animals.GameComponents.Engine.BinaryTree.Node;
    import animals.GameComponents.Fact;
    import animals.GameInformation.GameInformation;
    import animals.GameInformation.InformationAccess;
    import animals.Messages.*;

    import java.util.logging.Logger;

    public class Interogator {

        private static final Logger LOGGER = Logger.getLogger(Interogator.class.getName());
        private GameInformation gameInformation = InformationAccess.getGameInformation();

        public void performAction(Actions action) {
            if (action.isQuestion()) {
                askQuestion(action);
            } else {
                makeStatement(action);
            }
        }

        public void init() {
            if (gameInformation.getGameTree().getRoot() == null) {
                System.out.println("I want to learn about animals.");
                Animal animal = AskAnimal.askFirstAnimal();
                Node node = new Node(animal);
                gameInformation.getGameTree().setRoot(node);
                System.out.println("Wonderful!\nI've learned so much about animals!");
            } else {
                System.out.println("I know alot about animals.");
            }
        }

        public void traverseTree() {
            // init tree
            Node node = gameInformation.getGameTree().getRoot();
            // initial case
            if (node == null) {
                LOGGER.info("Setting initial node");
                Animal animal = AskAnimal.askFirstAnimal();
                node = new Node(animal);
                gameInformation.getGameTree().setRoot(node);
            }
            // traverse the tree
            while (!node.isLeaf()) {
                LOGGER.info(String.format("Traversing node with Animal: %s\nand\nFact %s", node.getAnimal(), node.getFact()));
                System.out.println(node.getFact().turnIntoQuestion());
                if (InformationAccess.getInterpreter().isAnswerYes()) {
                    node = node.getLeft();
                } else {
                    node = node.getRight();
                }
            }
            interpretLeaf(node);
        }

        private void interpretLeaf(Node leaf) {
            System.out.println(new AskAnimal(leaf.getAnimal()).getMessage());
            if (!InformationAccess.getInterpreter().isAnswerYes()) {
                System.out.println("I give up. What animal do you have in mind?");
                String userInput = UserInteraction.getUserInput();
                Animal correctAnimal = new Animal(userInput);
                gameInformation.setFirstAnimal(leaf.getAnimal());
                gameInformation.setSecondAnimal(correctAnimal);
                setFact(leaf, leaf.getAnimal(), correctAnimal);
            } else {
                System.out.println("Nice! I've learned so much about animals!");
            }
        }

        private void askQuestion(Actions action) throws IllegalArgumentException {
            Question question = (Question) action;
            LOGGER.info(String.format("Next action %s", question.name()));
            switch (question) {
                case ASK_FIRST_ANIMAL:
                    gameInformation.setFirstAnimal(AskAnimal.askFirstAnimal());
                    break;
                case ASK_SECOND_ANIMAL:
                    gameInformation.setSecondAnimal(AskAnimal.askSecondAnimal());
                    break;
                default:
                    throw new IllegalArgumentException(String.format("No question %s found", question.name()));
            }
        }

        private void makeStatement(Actions action) throws IllegalArgumentException {
            Statement statement = (Statement) action;
            LOGGER.info(String.format("Next action %s", statement.name()));
            switch (statement) {
                case GREET:
                    System.out.println(new Greeting().getMessage());
                    break;
                case GOODBYE:
                    System.out.println(new Goodbye().getMessage());
                    break;
                case FACT:
                    System.out.println(new InterpretFacts().getMessage());
                    break;
                default:
                    throw new IllegalArgumentException(String.format("No statement %s found", statement.name()));
            }
        }

        private void setFact(Node leaf, Animal guessed, Animal correct) {
            Fact fact = new Fact();
            fact.init();
            leaf.setFact(fact);
            while (true) {
                System.out.println(String.format("Is the statement correct for %s?", correct));
                String userInput = UserInteraction.getUserInput();
                if (InformationAccess.getInterpreter().answerIsYes(userInput)) {
                    correct.setFact(fact);
                    Fact falsified = new Fact(fact);
                    falsified.setNegated(true);
                    guessed.setFact(falsified);
                    Node leftNode = new Node(correct);
                    Node rightNode = new Node(guessed);

                    leaf.setLeft(leftNode);
                    leaf.setRight(rightNode);
                    break;
                }
                if (InformationAccess.getInterpreter().answerIsNo(userInput)) {
                    guessed.setFact(fact);
                    Fact falsified = new Fact(fact);
                    falsified.setNegated(true);
                    correct.setFact(falsified);
                    Node leftNode = new Node(guessed);
                    Node rightNode = new Node(correct);

                    leaf.setLeft(leftNode);
                    leaf.setRight(rightNode);
                    break;
                } else {
                    System.out.println(new Clarification().getMessage());
                }
            }
            System.out.println(new InterpretFacts().getMessage());
        }

    }
  learner_created: false
- name: src/animals/GameComponents/Engine/BinaryTree/GameTree.java
  visible: true
  text: |
    package animals.GameComponents.Engine.BinaryTree;

    import com.fasterxml.jackson.annotation.JsonInclude;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    public class GameTree {
        private Node root;

        public GameTree() {
            // empty constructor
        }

        public Node getRoot() {
            return root;
        }

        public void setRoot(Node root) {
            this.root = root;
        }
    }
  learner_created: false
- name: src/animals/Actions/impl/Question.java
  visible: true
  text: |
    package animals.Actions.impl;

    import animals.Actions.Actions;

    public enum Question implements Actions {
        ASK_FIRST_ANIMAL,
        ASK_SECOND_ANIMAL,
        ASK_FOR_FACT,
        ASK_AGAIN,
        CONFIRM_POSITIV,
        CONFIRM_NEGATIV;


        @Override
        public boolean isQuestion() {
            return true;
        }
    }
  learner_created: false
- name: src/animals/GameComponents/Engine/BinaryTree/Node.java
  visible: true
  text: |
    package animals.GameComponents.Engine.BinaryTree;

    import animals.GameComponents.Animal;
    import animals.GameComponents.Fact;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonInclude;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    public class Node {
        private Animal animal;
        private Fact fact;
        private Node left;
        private Node right;

        public Node() {
            // empty constructor
        }

        public Node(Animal animal, Fact fact) {
            this.animal = animal;
            this.fact = fact;
        }

        public Node(Animal animal) {
            this.animal = animal;
        }

        public Node(Fact fact) {
            this.fact = fact;
        }

        @JsonIgnore
        public boolean isLeaf() {
            return left == null && right == null;
        }

        public Animal getAnimal() {
            return animal;
        }

        public void setAnimal(Animal animal) {
            this.animal = animal;
        }

        public void setFact(Fact fact) {
            this.fact = fact;
        }

        public void setLeft(Node left) {
            this.left = left;
        }

        public void setRight(Node right) {
            this.right = right;
        }

        public Fact getFact() {
            return fact;
        }

        public Node getLeft() {
            return left;
        }

        public Node getRight() {
            return right;
        }
    }
  learner_created: false
- name: src/animals/GameComponents/Fact.java
  visible: true
  text: |
    package animals.GameComponents;

    import animals.GameComponents.Engine.UserInteraction;
    import animals.GameInformation.InformationAccess;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonInclude;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    public class Fact {
        private static final Pattern pattern = Pattern.compile("has|is|can", Pattern.CASE_INSENSITIVE);

        public static final String EXAMPLE_STATEMENTS = "The examples of a statement:\n - It can fly\n - It has a horn\n - It is a mammal";

        private boolean isNegated;

        private String verb;
        private String object;

        public Fact() {
        }

        public Fact(Fact f) {
            this.verb = f.verb;
            this.object = f.object;
            this.isNegated = f.isNegated;
        }

        public boolean isNegated() {
            return isNegated;
        }

        public void setNegated(boolean negated) {
            isNegated = negated;
        }

        public String getVerb() {
            return verb;
        }

        public void setVerb(String verb) {
            this.verb = verb;
        }

        public String getObject() {
            return object;
        }

        public void setObject(String object) {
            this.object = object;
        }

        @Override
        public String toString() {
            return !isNegated ? String.format("%s%s", verb, object) : String.format("%s%s", negate(), object);
        }

        @JsonIgnore
        public String turnIntoQuestion() {
            switch (verb) {
                case "has":
                    return String.format("- Does it have%s?", object);
                case "is":
                    return String.format("- Is it%s?", object);
                case "can":
                    return String.format("- Can it%s?", object);
                default:
                    throw new IllegalArgumentException(String.format("No action found for verb: %s", verb));
            }
        }

        private String negate() {
            switch (verb) {
                case "has":
                    return "doesn't have";
                case "is":
                    return "isn't";
                case "can":
                    return "can't";
                default:
                    throw new IllegalArgumentException(String.format("Verb %s could not be negated", verb));
            }
        }

        @JsonIgnore
        public void init() {
            String initialQuestion = String.format("Specify a fact that distinguishes %s from %s.\n" +
                            "The sentence should be of the format: 'It can/has/is ...'.\n",
                    InformationAccess.getGameInformation().getFirstAnimal(),
                    InformationAccess.getGameInformation().getSecondAnimal());
            System.out.println(initialQuestion);
            while (true) {
                String answer = UserInteraction.getUserInput();
                answer = InformationAccess.getInterpreter().sanitize(answer);
                Matcher matcher = pattern.matcher(answer);
                if (matcher.find() && !InformationAccess.getInterpreter().isStatment(answer)) {
                    verb = matcher.group();
                    object = answer.substring(3 + verb.length(), answer.length());
                    break;
                } else {
                    System.out.println(String.format("%s\n%s", EXAMPLE_STATEMENTS, initialQuestion));
                }
            }
        }
    }
  learner_created: false
- name: src/animals/GameInformation/InformationAccess.java
  visible: true
  text: |
    package animals.GameInformation;

    import animals.GameComponents.Engine.Interogator;
    import animals.GameComponents.Engine.Interpreter;

    public class InformationAccess {
        private static final GameInformation gameInformation = new GameInformation();
        private static final Interpreter interpreter = new Interpreter();
        private static final Interogator interogator = new Interogator();

        public static GameInformation getGameInformation() {
            return gameInformation;
        }

        public static Interpreter getInterpreter() {
            return interpreter;
        }

        public static Interogator getInterogator() {
            return interogator;
        }

        private InformationAccess() {};
    }
  learner_created: false
- name: src/animals/GameComponents/Engine/UserInteraction.java
  visible: true
  text: |
    package animals.GameComponents.Engine;

    import java.util.Locale;
    import java.util.Scanner;

    public class UserInteraction {

        private static final Scanner scanner = new Scanner(System.in);

        public static String getUserInput() {
            System.out.print("> ");
            return scanner.nextLine().toLowerCase(Locale.ROOT);
        }

        private UserInteraction() {}
    }
  learner_created: false
- name: src/animals/GameInformation/GameInformation.java
  visible: true
  text: |
    package animals.GameInformation;

    import animals.Actions.Actions;
    import animals.GameComponents.Animal;
    import animals.GameComponents.Engine.BinaryTree.GameTree;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.fasterxml.jackson.databind.json.JsonMapper;
    import com.fasterxml.jackson.dataformat.xml.XmlMapper;
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;

    import java.io.File;
    import java.io.IOException;

    public class GameInformation {
        private GameTree gameTree;
        private Actions action;
        private Animal firstAnimal;
        private Animal secondAnimal;
        private String fileFormat;

        public GameInformation() {
        }

        public GameTree getGameTree() {
            return gameTree;
        }

        public Actions getAction() {
            return action;
        }

        public void setAction(Actions action) {
            this.action = action;
        }

        public Animal getFirstAnimal() {
            return firstAnimal;
        }

        public void setFirstAnimal(Animal firstAnimal) {
            this.firstAnimal = firstAnimal;
        }

        public Animal getSecondAnimal() {
            return secondAnimal;
        }

        public void setSecondAnimal(Animal secondAnimal) {
            this.secondAnimal = secondAnimal;
        }

        public String getFileFormat() {
            return fileFormat;
        }

        public void setFileFormat(String fileFormat) {
            this.fileFormat = fileFormat;
        }

        public void saveDate() {
            File pathToData = new File(getFileName());
            try {
                getMapper().writerWithDefaultPrettyPrinter()
                        .writeValue(pathToData, gameTree);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public void initTree() {
            File pathToData = new File(getFileName());
            ObjectMapper mapper = getMapper();
            if (pathToData.exists()) {
                try {
                    gameTree = mapper.readValue(pathToData, GameTree.class);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            } else {
                gameTree = new GameTree();
            }
        }

        private ObjectMapper getMapper() {
            switch (fileFormat) {
                case "json":
                    return new JsonMapper();
                case "xml":
                    return new XmlMapper();
                case "yaml":
                    return new YAMLMapper();
                default:
                    throw new IllegalArgumentException("No proper mapper selected. One of [json, yaml, xml]");
            }
        }

        private String getFileName() {
            return "animals." + fileFormat;
        }

    }
  learner_created: false
- name: src/animals/GameComponents/Engine/Interpreter.java
  visible: true
  text: |
    package animals.GameComponents.Engine;

    import animals.Actions.Actions;
    import animals.Actions.impl.Question;
    import animals.GameInformation.InformationAccess;
    import animals.Messages.Clarification;

    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Interpreter {
        private static final List<String> POSITIVE_RESPONSES = List.of("y",
                "yes", "yeah", "yep", "sure", "right",
                "affirmative", "correct", "indeed", "you bet",
                "exactly", "you said it");
        private static final List<String> NEGATIV_ANSWERS = List.of("n",
                "no", "no way", "nah", "nope", "negative", "i don't think so",
                "yeah no");

        public Actions interpretInput(String userInput) {
            String cleanedInput = sanitize(userInput);
            if (POSITIVE_RESPONSES.contains(cleanedInput)) {
                return Question.CONFIRM_POSITIV;
            } else if (NEGATIV_ANSWERS.contains(cleanedInput)) {
                return Question.CONFIRM_NEGATIV;
            } else {
                return Question.ASK_AGAIN;
            }
        }

        public boolean answerIsYes(String userInput) {
            if (POSITIVE_RESPONSES.contains(sanitize(userInput))) {
                return true;
            } else {
                return false;
            }
        }

        public boolean answerIsNo(String userInput) {
            if (NEGATIV_ANSWERS.contains(sanitize(userInput))) {
                return true;
            } else {
                return false;
            }
        }

        public boolean isStatment(String userInput) {
            Pattern pattern = Pattern.compile("it can|it has|it is", Pattern.CASE_INSENSITIVE);
            Matcher matcher = pattern.matcher(userInput);
            return !matcher.find();
        }

        public String sanitize(String input) {
            String sanitized = input.trim();
            Pattern pattern = Pattern.compile("\\.{1}|!{1}|\\?{1}");
            Matcher matcher = pattern.matcher(sanitized);
            if (matcher.find()) {
                String punctuations = matcher.group();
                return sanitized.substring(0, sanitized.length() - punctuations.length());
            }
            return  sanitized;
        }

        public boolean isAnswerYes() {
            while (true) {
                String answer = UserInteraction.getUserInput();
                if (InformationAccess.getInterpreter().answerIsYes(answer)) {
                    return true;
                } else if (InformationAccess.getInterpreter().answerIsNo(answer)) {
                    return false;
                } else {
                    System.out.println(new Clarification().getMessage());
                }
            }
        }

    }
  learner_created: false
- name: src/animals/Actions/impl/Statement.java
  visible: true
  text: |
    package animals.Actions.impl;

    import animals.Actions.Actions;

    public enum Statement implements Actions {
        GREET,
        GOODBYE,
        FACT;

        @Override
        public boolean isQuestion() {
            return false;
        }
    }
  learner_created: false
- name: src/animals/Actions/Actions.java
  visible: true
  text: |-
    package animals.Actions;

    public interface Actions {
        boolean isQuestion();
    }
  learner_created: false
- name: test/en.data.yaml
  visible: false
  text: |-
    ---
    - - yaml
    - - json
    - - xml
  learner_created: false
- name: test/en.script.yaml
  visible: false
  text: |+
    #
    # There is a scenario of parameterized test for English language.
    #
    ---
    - [start, "-type {0}"] # We will test three different file formats: JSON, YAML, XML
    - - contains
      - which animal
      - When no Knwoledge Tree is created yet the program should ask for a favourite animals at first.
    - [input, cat]
    - - contains
      - welcome to the animal
      - After entering the favourite animal the program should welcom the user and represent itself as an expert system

    #
    # Start the menu
    #
    - - matches
      - "(?si).*play.*list.*search.*stat.*print.*exit.*"
      - The program should display the menu

    #
    # Let's play the game!
    #
    - [input, 1]
    - - contains
      - you think of an animal, and i guess it.
      - The program should asks the user to think of an animal
    - - contains
      - press enter
      - The computer should make a pause before the game.
    - [input, ""]

    #
    # After user press Enter the game started!
    #
    - - contains
      - is it a cat?
      - The very first question in the very first game should undoubtedly be about a beloved animal.
    - [input, No] # We think of about other animal, not about the cat
    - - contains
      - i give up
      - If the program cannot guess the animal, it must give up.
    - [input, dog] # Of course, our second animal is a dog!
    - - contains
      - distinguishes
      - The program should find out how one animal differs from another.
    - - input
      - it can climb trees
    - - find
      - is .+ correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, no]

    - - contains
      - "cat can climb trees"
      - The program must generate the correct fact for the first animal.

    - - contains
      - "the dog "
      - The program must generate the correct fact for the second animal.

    - - matches
      - "(?is).*(again|repeat|one more).*"
      - The program should ask the user to play again
    - [input, yes] # Yes, we will play once again
    - [input, ""] # Press ENTER
    - - contains
      - can it climb trees?
      - After the first game, the starting question should be the question of fact.
    - [input, yes]
    - [contains, "is it a cat?", "The program must assume that the animal is a cat."]
    - - input
      - |
        no
        lynx
        it is living in the forest
        yes
        no
    # We finish the game.

    - - matches
      - "(?si).*play.*list.*search.*stat.*print.*exit.*"
      - The program should display the menu

    - [input, "0"] # Exit from the application
    - - matches
      - "(?si).*(bye|later|soon|off|see|!).*"
      - How about to say goodbye to the user?
    - [finish, "The program should finish when user exit"]
    - - file exists
      - "animals.{0}"
      - "The program should save knowledge tree to animals.{0} file."
    #
    # After the first session the program created and save the Knowledge Tree
    # We will run the program again to make sure that all data was saved and restored correctly.
    #
    - [start, "-type {0}"]
    - - not contains
      - which animal do you like most?
      - If the tree of knowledge exists, then the program should not ask the user about his favorite animal.
    - - find
      - welcome to the animal(.s)? expert system
      - The program should immediately greet the user after starting.
    #
    # Start the menu
    #
    - - matches
      - "(?si).*play.*list.*search.*stat.*print.*exit.*"
      - The program should display the menu

    #
    # Let's check which animals are now in our knowledge tree.
    #
    - [input, "2"]
    - - matches
      - (?si).*cat.*dog.*lynx.*
      - The program should print a list of all animals in alphabetical order.

    #
    # Check the facts about the animal
    #
    - [input, "3"]
    - - find
      - enter.* animal
      - The program should ask the user to enter the name of the animal
    - [input, lynx]
    - - contains
      - facts about the lynx
      - The program must find the animal that is in the knowledge tree.
    - - contains
      - it can climb trees
      - The program did not print the first fact about the animal
    - - contains
      - it is living in the forest
      - The program did not print the second fact about the animal

    #
    # Check the knowledge tree statistics
    #
    - [input, "4"]
    - [contains, "knowledge tree", "The header for the table must be printed"]

    - - find
      - (?i)root node.*It can climb trees
      - The root element in our tree must be a statement

    - - find
      - number of nodes.*\b5\b
      - The total number of nodes in the tree is not counted correctly.

    - - find
      - number of animals\D*3\b
      - The total number of animals in the tree is not counted correctly.

    - - find
      - number of statements\D*2\b
      - The total number of animals in the tree is not counted correctly.

    - - find
      - height of the tree\D*2\b
      - The tree depth was calculated incorrectly.

    - - find
      - minimum\D*1\b
      - The minimum tree depth was calculated incorrectly.

    - - find
      - average\D*1[,.]7
      - The average tree depth was calculated incorrectly.

    - [input, "0"] # Exit from the application
    - [finish, "The program should finish when user exit"]
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."


  learner_created: false
- name: test/eo.data.yaml
  visible: false
  text: |-
    ---
    - - yaml
    - - json
    - - xml
  learner_created: false
- name: test/eo.script.yaml
  visible: false
  text: |+
    #
    # There is a scenario of parameterized test for Esperanto language.
    #
    ---
    - [start, "-type {0}"] # We will test three different file formats: JSON, YAML, XML
    - - contains
      - "kiun beston vi plej ŝatas?"
      - "[Esperanto] When no Knowledge Tree is created yet the program should ask for a favourite animals at first."
    - [input, kato]
    - - contains
      - bonvenon al la sperta sistemo de la besto!
      - "[Esperanto] After entering the favourite animal the program should welcome the user and represent itself as an expert system"

    #
    # Start the menu
    #
    - - matches
      - (?si).*Ludi.*Listo.*Serĉi.*Kalkuli.*Eliri.*
      - "[Esperanto] The program should display the menu"

    #
    # Let's play the game!
    #
    - [input, 1]
    - - contains
      - vi pensu pri besto, kaj mi divenos ĝin.
      - "[Esperanto] The program should asks the user to think of an animal"
    - - contains
      - premu enen kiam vi pretas.
      - "[Esperanto] The computer should make a pause before the game."
    - [input, ""]

    #
    # After user press Enter the game started!
    #
    - - contains
      - ĉu ĝi estas kato?
      - "[Esperanto] The very first question in the very first game should undoubtedly be about a beloved animal."
    - [input, ne] # We think of about other animal, not about the cat
    - - contains
      - mi rezignas. kiun beston vi havas en la kapo?
      - "[Esperanto] If the program cannot guess the animal, it must give up."
    - [input, hundo] # Of course, our second animal is a dog!
    - - contains
      - indiku fakton, kiu distingas kato de hundo
      - "[Esperanto] The program should find out how one animal differs from another."
    - - input
      - ĝi povas surgrimpi arbon
    - - contains
      - ĉu la aserto ĝustas por la hundo?
      - "[Esperanto] The program should clarify if the statement is correct for a dog."
    - [input, ne]

    - - contains
      - la kato povas surgrimpi arbon
      - The program must generate the correct fact for the first animal.

    - - contains
      - la hundo ne povas surgrimpi arbon
      - "[Esperanto] The program must generate the correct fact for the second animal."

    - - matches
      - "(?is).*(denove|ripeti|ankoraŭ).*"
      - "[Esperanto] The program should ask the user to play again"
    - [input, jes] # Yes, we will play once again
    - [input, ""] # Press ENTER
    - - contains
      - povas surgrimpi arbon?
      - "[Esperanto] After the first game, the starting question should be the question of fact."
    - [input, jes]
    - [contains, "ĉu ĝi estas kato?", "[Esperanto] The program must assume that the animal is a cat."]
    - - input
      - |
        ne
        linko
        ĝi loĝas en la arbaro
        jes
        ne
    # We finish the game.
    - - matches
      - (?si).*Ludi.*Listo.*Serĉi.*Kalkuli.*Eliri.*
      - "[Esperanto] The program should display the menu"
    - [input, "0"] # Exit from the application
    - - matches
      - "(?si).*(ĝis|estis).*"
      - "[Esperanto] How about to say goodbye to the user?"
    - [finish, "The program should finish when user exit"]
    - - file exists
      - "animals_eo.{0}"
      - "The program should save knowledge tree to animals_eo.{0} file."
    #
    # After the first session the program created and save the Knowledge Tree
    # We will run the program again to make sure that all data was saved and restored correctly.
    #
    - [start, "-type {0}"]
    - - not contains
      - kiun beston vi plej ŝatas?
      - "[Esperanto] If the tree of knowledge exists, then the program should not ask the user about his favorite animal."
    - - contains
      - bonvenon al la sperta sistemo de la besto!
      - "[Esperanto] The program should immediately greet the user after starting."
    - - matches
      - (?si).*Ludi.*Listo.*Serĉi.*Kalkuli.*Eliri.*
      - "[Esperanto] The program should display the menu"

    #
    # Let's check which animals are now in our knowledge tree.
    #
    - [input, "2"]
    - - matches
      - (?si).*hundo.*kato.*linko.*
      - "[Esperanto] The program should print a list of all animals in alphabetical order."

    #
    # Check the facts about the animal
    #
    - [input, "3"]
    - - find
      - enigu .* besto
      - "[Esperanto] The program should ask the user to enter the name of the animal"
    - [input, linko]
    - - contains
      - faktoj pri la linko
      - "[Esperanto] The program must find the animal that is in the knowledge tree."
    - - contains
      - ĝi povas surgrimpi arbon
      - "[Esperanto] The program did not print the first fact about the animal"
    - - contains
      - ĝi loĝas en la arbaro
      - "[Esperanto] The program did not print the second fact about the animal"

    #
    # Check the knowledge tree statistics
    #
    - [input, "4"]
    - [contains, "la statistiko", "The header for the table must be printed"]

    - - matches
      - (?is).*radika nodo.*povas surgrimpi arbon.*
      - "[Esperanto] The root element in our tree must be a statement"

    - - matches
      - (?is).*nombro de nodoj[^\\R]*5.*
      - "[Esperanto] The total number of nodes in the tree is not counted correctly."

    - - matches
      - (?is).*nombro de bestoj[^\\R]*3.*
      - "[Esperanto] The total number of animals in the tree is not counted correctly."

    - - matches
      - (?is).*nombro de deklaroj[^\\R]*2.*
      - "[Esperanto] The total number of animals in the tree is not counted correctly."

    - - matches
      - (?is).*alteco de la arbo[^\\R]*2.*
      - "[Esperanto] The tree depth was calculated incorrectly."

    - - matches
      - (?is).*minimuma profundo[^\\R]*1.*
      - "[Esperanto] The minimum tree depth was calculated incorrectly."

    - - matches
      - (?is).*averaĝa profundo[^\\R]*1[,.]7.*
      - "[Esperanto] The average tree depth was calculated incorrectly."

    - [input, "0"] # Exit from the application
    - [finish, "The program should finish when user exit"]
    - - file delete
      - "animals_eo.{0}"
      - "[Esperanto] The test can't delete animals_eo.{0} file."


  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.File;
    import java.io.IOException;
    import java.util.Locale;
    import java.util.stream.Stream;

    public class GuessAnimalTest extends StageTest<String> {

        String[] languages = new String[]{"en", "eo"};

        @DynamicTest(data = "languages")
        CheckResult testLanguages(final String language) throws IOException {
            final var fileName = "animals" + ("en".equals(language) ? "." : "_" + language + ".");

            final var locale = Locale.getDefault();
            final var systemLanguage = System.getProperty("user.language");
            Locale.setDefault(new Locale(language));
            System.setProperty("user.language", language);

            deleteFiles(fileName);
            final var result = new Scenario(language).check();
            deleteFiles(fileName);

            Locale.setDefault(locale);
            System.setProperty("user.language", systemLanguage);

            return result;
        }

        private void deleteFiles(String fileName) {
            Stream.of("yaml", "json", "xml")
                    .map(fileName::concat)
                    .map(File::new)
                    .filter(File::exists)
                    .forEach(File::delete);
        }
    }
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim().toLowerCase();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim().toLowerCase();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: src/animals/GameInformation/Localizer.java
  visible: true
  learner_created: true
- name: src/main/resources/messages_en.properties
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/132/stages/708/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 02 May 2021 07:36:06 UTC
record: -1
